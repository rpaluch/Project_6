pragma solidity ^0.4.24;

import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeecore/Ownable.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, FarmerRole, DistributorRole, ConsumerRole {

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;

  // Define enum 'State' with the following values:
  enum State
  {
    Harvested,  // 0
    Packed,     // 1
    ForSale,    // 2
    Sold,       // 3
    Shipped,    // 4
    Received,   // 5
    Purchased   // 6
  }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    uint    retailPrice; // Product Retail Price
    uint    distanceInTransit; // Distance (in km) the item was in transit
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(address payer, uint _price) {
    _;
    uint amountToReturn = msg.value - _price;
    payer.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner()) {
      selfdestruct(msg.sender);
    }
  }

  // Define a function 'harvestVegetable' that allows a farmer to mark vegetable batch 'Harvested'
  function harvestItem(uint _upc, address _originFarmerID, string _originFarmName, string  _originFarmLatitude, string  _originFarmLongitude, string  _productNotes) public
  onlyFarmer
  {
    // Add the new item as part of Harvest
    Item memory newItem = Item(sku, _upc, _originFarmerID, _originFarmerID, _originFarmName, _originFarmLatitude, _originFarmLongitude, sku + _upc, _productNotes, 0, 0, 0, State.Harvested, address(0), address(0));
    items[_upc] = newItem;
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Harvested(_upc);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  harvested(_upc)
  // Call modifier to verify caller of this function
  onlyFarmer
  verifyCaller(items[_upc].originFarmerID)
  {
    // Update the appropriate fields
    Item storage item = items[_upc];
    item.itemState = State.Packed;

    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public
  // Call modifier to check if upc has passed previous supply chain stage
  packed(_upc)
  // Call modifier to verify caller of this function
  onlyFarmer
  verifyCaller(items[_upc].originFarmerID)
  {
    // Update the appropriate fields
    Item storage item = items[_upc];
    item.productPrice = _price;
    item.itemState = State.ForSale;

    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(msg.sender, items[_upc].productPrice)
    // Call modifier to verify caller
    onlyDistributor
    {

    // Update the appropriate fields - distributorID, ownerID, itemState
    Item storage item = items[_upc];
    item.distributorID = msg.sender;
    item.ownerID = item.distributorID;
    item.itemState = State.Sold;

    // Transfer money to farmer
    uint _price = item.productPrice;
    item.originFarmerID.transfer(_price);

    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
    // Call modifier to verify caller of this function
    onlyFarmer
    verifyCaller(items[_upc].originFarmerID)
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;

    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the distributor to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc, uint _distanceInTransit, uint _margin) public
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyDistributor
    verifyCaller(items[_upc].distributorID)
    {

    // Update the appropriate fields - itemState, transit data
    Item storage item = items[_upc];
    item.distanceInTransit = _distanceInTransit;
    item.itemState = State.Received;

    // Update price with distributor margin
    uint _price = item.productPrice;
    item.retailPrice = _price + (_price * _margin / 100);

    // Emit the appropriate event
    emit Received(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public payable
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].retailPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(msg.sender, items[_upc].retailPrice)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    Item storage item = items[_upc];
    item.consumerID = msg.sender;
    item.ownerID = item.consumerID;
    item.itemState = State.Purchased;

    // Transfer money to farmer
    item.distributorID.transfer(item.retailPrice);

    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
  (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originFarmerID,
    string  originFarmName,
    string  originFarmLatitude,
    string  originFarmLongitude,
    uint    retailPrice
  )
  {
    // Assign values to the 8 parameters
    Item memory item = items[_upc];
    itemSKU = item.sku;
    itemUPC = item.upc;
    ownerID = item.ownerID;
    originFarmerID = item.originFarmerID;
    originFarmName = item.originFarmName;
    originFarmLatitude = item.originFarmLatitude;
    originFarmLongitude = item.originFarmLongitude;
    retailPrice = item.retailPrice;
  return
  (
    itemSKU,
    itemUPC,
    ownerID,
    originFarmerID,
    originFarmName,
    originFarmLatitude,
    originFarmLongitude,
    retailPrice
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
  (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string  productNotes,
    uint    productPrice,
    uint    itemState,
    address distributorID,
    address consumerID,
    uint    distanceInTransit
  )
  {
    // Assign values to the 9 parameters
    Item memory item = items[_upc];
    itemSKU = item.sku;
    itemUPC = item.upc;
    productID = item.productID;
    productNotes = item.productNotes;
    productPrice = item.productPrice;
    itemState = uint(item.itemState);
    distributorID = item.distributorID;
    consumerID = item.consumerID;
    distanceInTransit = item.distanceInTransit;

  return
  (
    itemSKU,
    itemUPC,
    productID,
    productNotes,
    productPrice,
    itemState,
    distributorID,
    consumerID,
    distanceInTransit
  );
  }
}
