// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1;
    var upc = 1;
    const originFarmerID = accounts[1];
    const originFarmName = "John Doe";
    const originFarmLatitude = "-38.239770";
    const originFarmLongitude = "144.341490";
    const productNotes = "Best beans for Espresso";
    const productPrice = web3.utils.toWei("1", "ether");
    const retailPrice = web3.utils.toWei("1.2", "ether");
    var itemState = 0;
    const distributorID = accounts[2];
    const consumerID = accounts[3];
    const emptyAddress = '0x00000000000000000000000000000000000000';

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...");
    console.log("Contract Owner: accounts[0] ", accounts[0]);
    console.log("Farmer: accounts[1] ", accounts[1]);
    console.log("Distributor: accounts[2] ", accounts[2]);
    console.log("Consumer: accounts[3] ", accounts[3]);

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Add Farmer role to address
        let roleTx = await supplyChain.addFarmer(originFarmerID);
        truffleAssert.eventEmitted(roleTx, 'FarmerAdded');

        // Mark an item as Harvested by calling function harvestItem()
        let tx = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmLatitude, originFarmLongitude, productNotes, { from: originFarmerID });

        // Watch the emitted event Harvested()
        truffleAssert.eventEmitted(tx, 'Harvested');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[6], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State');
    });

    // 2nd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Mark an item as Packed by calling function packItem()
        let tx = await supplyChain.packItem(upc, { from: originFarmerID });
        // Watch the emitted event Packed()
        truffleAssert.eventEmitted(tx, 'Packed');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBuffer[5], 1, 'Error: Invalid item State');
    });

    // 3rd Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Mark an item as ForSale by calling function sellItem()
        let tx = await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
        // Watch the emitted event ForSale()
        truffleAssert.eventEmitted(tx, 'ForSale');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItemBufferTwo.call(upc);
        // Verify the result set
        assert.equal(resultBuffer[4], productPrice, 'Error: Invalid item Price');
        assert.equal(resultBuffer[5], 2, 'Error: Invalid item State');
          
    });

    // 4th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Add Distributor role to address
        let roleTx = await supplyChain.addDistributor(distributorID);
        truffleAssert.eventEmitted(roleTx, 'DistributorAdded');

        // Mark an item as Sold by calling function buyItem()
        const payment = web3.utils.toWei("1", "ether");
        let tx = await supplyChain.buyItem(upc, { from: distributorID, value: payment });

        // Watch the emitted event Sold()
        truffleAssert.eventEmitted(tx, 'Sold');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID');

    });

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Mark an item as Shipped by calling function shipItem()
        let tx = await supplyChain.shipItem(upc, { from: originFarmerID });

        // Watch the emitted event Shipped()
        truffleAssert.eventEmitted(tx, 'Shipped');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItemBufferTwo.call(upc);
        // Verify the result set
        assert.equal(resultBuffer[5], 4, 'Error: Invalid item State');
              
    });

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed();

        const distanceInTransit = 50;
        const margin = 20; // distributor sales margin (% of price)
        // Mark an item as Sold by calling function receiveItem()
        const tx = await supplyChain.receiveItem(upc, distanceInTransit, margin, { from: distributorID });

        // Watch the emitted event Received()
        truffleAssert.eventEmitted(tx, 'Received');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(resultBufferOne[7], retailPrice, 'Error: Invalid retail price');
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[8], distanceInTransit, 'Error: Invalid distance in transit');

    });

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Add Consumer role to address
        const roleTx = await supplyChain.addConsumer(consumerID);
        truffleAssert.eventEmitted(roleTx, 'ConsumerAdded');

        // Mark an item as Purchased by calling function purchaseItem()
        const payment = web3.utils.toWei("1.2", "ether");
        let tx = await supplyChain.purchaseItem(upc, { from: consumerID, value: payment });

        // Watch the emitted event Purchased()
        truffleAssert.eventEmitted(tx, 'Purchased');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID');
        
    });

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Missing or Invalid SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Missing or Invalid UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid Owner ID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid Origin Farmer ID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid Origin Farm Name');
        assert.equal(resultBufferOne[5], originFarmLatitude, 'Error: Missing or Invalid Origin Farm Latitude');
        assert.equal(resultBufferOne[6], originFarmLongitude, 'Error: Missing or Invalid Origin Farm Longitude');
        assert.equal(resultBufferOne[7], retailPrice, 'Error: Missing or Invalid Retail Price');

        
    });

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Missing or Invalid SKU');
        assert.equal(resultBufferTwo[1], upc, 'Error: Missing or Invalid UPC');
        assert.equal(resultBufferTwo[2], sku + upc, 'Error: Missing or Invalid Product ID');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid Product Notes');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid Product Price');
        assert.equal(resultBufferTwo[5], 6, 'Error: Missing or Invalid Item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid Distributor ID');
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid Consumer ID');
        assert.equal(resultBufferTwo[8], 50, 'Error: Missing or Invalid Distance in Transit');
    });

});
